* Конструкторы нужны для создания объекта с уже заданные полями (значения задаются во время создания объекта)
* Конструктор вызывается только один раз при создании объекта
* В классе должно быть хотя бы 2 конструктора: без параметров и со всеми полями (хороший тон)
* Для создания объекта всегда используется конструктор (без него объект не создать)
* Если вы не создали ни одного конструктора – компилятор создает “конструктор по-умолчанию” без параметров
* Конструкторы могут иметь входящие параметры (в скобках)
* Если вы создали хотя бы один конструктор, то компилятор не создает “конструктор по-умолчанию”
* В конструкторе нежелателен лишний код – только присвоение значений (можно разве что вызвать какой-либо доп. метод)
* Конструкторы могут следовать сразу в начале класса или после списка полей (но перед get/set)
* У любой переменной обязательно должен быть указан тип значения, который он может хранить
* У методов может быть указан тип возвращаемого значения (или void, если ничего не возвращает)
* “Возвращает результат” означает, что в том месте, где был вызван метод – вернется результат определенного типа и с ним можно дальше работать (присвоить в переменную, распечатать и пр.)
* Типы данных (String, int и др) указываются для переменных и методов
* Сначала хотя бы нужно правильно научиться использовать типы: String, int, boolean, double
* get/set (геттеры/сеттеры) – это методы с узкой направленностью (не должно быть лишнего кода, а только присвоение/получение значения)
* get/set для внешних вызовов (вне класса), внутри класса можно обращаться к переменным напрямую
* Сеттеры позволяют задать значения полей только после создания объекта (в отличие от конструктора)
* Геттеры позволяют получить значения полей объекта
* get/set можно вызывать любое количество раз после создания объекта (конструктор можно вызвать только один раз)
* Геттеры/сеттеры обычно имеют модификатор public
* Поля объекта обычно имеют модификатор private, доступ к ним осуществляется с помощью get/set
* Напрямую давать доступ к полям (свойствам) объекта в Java не рекомендуется (только через get/set)
* Иногда для разделения понятий: get/set называют “properties“, а сами private поля – “fields“
* Объект должен иметь правильное API: скрываем внутреннюю реализацию (private), а для “внешнего мира” открываем только минимально необходимый доступ (public), чтобы объектом было удобно пользоваться
* Методы get/set обычно следуют сразу после списка полей в классе или после конструкторов
* Комбинация Alt + Insert в IDEA – быстрая генерация get/set, конструкторов и другого кода
* API объекта – это его public элементы (методы, конструкторы, переменные)